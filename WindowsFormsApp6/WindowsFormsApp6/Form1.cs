using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


//Автор программы Вардеванян Артём Гагикович 
/*Формулировка задачи:
 * Даны взаимно простые натуральные числа p, q ( p < q ). 
 * Найти периодическую и непериодическую части десятичной дроби, равной p/q. 
 * Вывести эти части на графики в виде гистограмм.
*/
namespace WindowsFormsApp6
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        //метод, который возвращает полученную дробь
        public static string Period(int ch, int d)
        {
            int p = ch;//числитель
            int q = d;//знаменатель
            //создаём экземпляр s класса StringBuilder
            StringBuilder s = new StringBuilder();

            //целая часть
            int cel = p / q;
            //переменная в которой хранится значение результата деления p на q(p/q) 
            double x = (double)p / q;

            /*  
             *  если выполняется условие, то:
          периода нет, либо период начинается не с первого знака после запятой
         */
            if ((q % 2 == 0 || q % 5 == 0) && p < q)
           
            {
                //добавляем к переменной s строку с текстом
                s.Append("Дробь либо непериодична, либо период начинается не с первого знака. Дробь =  ");
                //добавляяем к переменной s результат p/q
                s.Append(x.ToString());

            }
            else 
            /*период начинается с 1-го знака
             *Если знаменатель не делится на 2 и на 5, 
            то период десятичной дроби начинается 
            сразу после запятой 
             */
            {
                //добавляем к переменной s строку с текстом
                s.Append("Дробь периодчина Вывод периода");
                ////добавляяем к переменной s период дроби
                s.Append(Periodic_fraction(p, q));
            }

            
            //возвращаем s
            return s.ToString();
        }


        //метод, который возвращает периодическую часть дроби
        public static string Periodic_fraction(int m, int b)
        {
            int p = m;//числитель
            int q = b;//знаменатель

            //размер массива равен значению делителя
            //массив, в котором будут записаны цифры десятичной дроби после запятой 
            int[] portion = new int[q];
            //длина периода
            int k = 0;
            //присваиваем переменной n значение числителя
            int n = p;
                     
            //в этом цикле умножаем числитель на 10 до тех пор, пока значение числителя умноженное на 10 делённое на знаменатель не будет равно значению числителя
            //умножаем на 10 по той причине, что нам нужна часть десятичной дроби, которая идет после запятой  
                do
                {
                    n *= 10;//умножаем числитель на 10
                    portion[k++] = n / q;//присваиваем элементам массива значение n/b
                    n = n % q;//переменной n присваиваем значение остатка от деления переменной n на знаменатель b 
                }
                while (n != p);// цикл выполняется до тех пор, пока значение переменной n не будет равно числителю m


            //создаём массив с размером k
            
            int[] period = new int[k];
            //цикл for, в котором присваиваем элементам массива period элементы массива portion
            for (n = 0; n < k; ++n)
            {
                period[n] = portion[n];
            }


            //создаём экземпляр s класса StringBuilder
            StringBuilder s = new StringBuilder();
            //если длина массива period больше 0, то выполняется цикл
            if (period.Length > 0)
            {
                //добавляем строку к s
                s.Append("(");
                //цикл for, в котором к переменной добавляется копия элемента массива period
                for (int i = 0; i <= period.Length - 1; i++)
                {
                    s.Append(period[i]);
                }
                //добавляем строку к s
                s.Append(")");
            }
            //возвращаем s
            return s.ToString();

            


        }
        //метод, возвращающий НОД 
        public static int MutuallyPrimeNumbers(int a, int z)
        {
            //алгоритм Евклида
            //цикл, который обрабатывает входные данные до тех пор, пока числа не равны друг другу
            do
            {
                //меньшее из двух значений вычитается из большего
                //a-числитель, b-знаменатель
                if (a > z)
                    a =a - z;
                else
                    z = z - a;
            } while (a != z);


            return z;//также можно было возратить переменную a
            // если метод возвратит 1, то это значит, что числа взаимно простые
        }
        //после нажатия этой кнопки("Расчёт") выводится результат p/q в рамке "Вывож результата"
        public void button1_Click(object sender, EventArgs e)
        {
            //обработка исключительной ситуации 
            try
            {

                int p;  //первое простое число
                int q;//второе простое число

                //ввод первого числа
                p = Convert.ToInt32(textBox1.Text);
                //ввод второго числа
                q = Convert.ToInt32(textBox2.Text);
                /*если одно из введённых значений отрицательное,
                 * то на экране появится окно с сообщением об ошибке
                */
                if (p < 0 || q < 0)
                    MessageBox.Show("Числа не могут быть отрицательными, по условию они натуральные!");
                //если числа равны, то на экране появится окно с сообщением об ошибке
                else if (p == q)
                    MessageBox.Show("Числа не должны быть равны!");
                //если первое число больше второго, то на экране появится окно с сообщением об ошибке
                else if (p > q)
                    MessageBox.Show("Первое число больше второго!");
                if ((MutuallyPrimeNumbers(p, q) == 1) && (p<q))
                    //если метод возвратит 1, то находим период дроби p/q
                    //результат выводим в рамке "Вывод результата"
                    textBox3.Text = String.Format("" + Period(p, q));
                // если нет, то выводим сообщение 
                else MessageBox.Show("Введённые значения не удовлетворяют условию!");
            }
            //выброс исключения, если входная строка имела неверный формат
            catch (Exception x)
            //свойство Message получает сообщение, описывающее текущее исключение
            {
                MessageBox.Show(x.Message);
            }

        }

        
        /* перед нажатием этой кнопки ("Нажмите, чтобы увидеть гистограмму"),
         * введите значения частей дроби в рамку "Введите части дроби"
         * после нажатия части выведутся на график в виде гистограмм 
        */
        private void button2_Click(object sender, EventArgs e)
        {
            //обработка исключительной ситуации
            try
            {
              
                //вывод периодической части на график в виде гистограммы 
                chart1.Series["Периодическая часть"].Points.AddXY("", textBox4.Text);

              
                //вывод непериодической части на график в виде гистограммы 
                chart1.Series["Непериодическая часть"].Points.AddXY("", textBox5.Text);

            }
            //выброс исключения, если входная строка имела неверный формат
            catch (FormatException v)
            {
                MessageBox.Show(v.Message);
            }

        }

       
    }
}
