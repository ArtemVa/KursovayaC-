using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



//Автор программы Вардеванян Артём Гагиковчич
/*Формулировка задачи: 
 * Реализовать операции с очередью в массиве.
 * Пусть очередь прирастает справа, убывает слева. 
 * Длина массива должна соответствовать длине очереди.
 */
namespace курсовая2
{ 
    public class FIFO
    {
        public double[] mas;//массив
        public int size;//количество элементов в очереди
        public int head=-1;//"голова" - начало (значению присваивается -1, для того, чтобы ддина массива соответствовала длине очереди)
        public int tail=-1;// "хвост" - конец (значению присваивается -1, для того, чтобы ддина массива соответствовала длине очереди)
        public int length;// размер маассива
        public FIFO(int length)//параметризированный конструктор
        {
            //массив длины length
            mas = new double[length];

            this.length = length;
        }
        //проверка на пустоту
        public bool isEmpty()
        {
            
            return size == 0;
        }

        //Вставка элемента в очередь
        public void Enqueue(double newelement)
        {
            //если значение конца или начала очереди будет равно длине очереди то очередь окажется переполненной и появится соответствующее сообщение 
            if ((tail == length) || (head == length)) throw new InvalidOperationException("Переполнение очереди");
            //иначе увеличиваем индекс конечного элемента на 1
            else ++tail;
            //увеличиваем значение количества элементов на 1
            size++;
            //присваиваем элементу массива с конца входное значение 
            try
            {
                mas[tail] = newelement;
            }
            catch(Exception b)
            {
                Console.WriteLine(b.Message);
            }

        }
        //Извлечение элемента из очереди
        public double Dequeue()
        {
            //проверка на пустоту, если очередь пуста, то выводится соответствующее сообщение
            if (isEmpty()) throw new InvalidOperationException("Очередь опустошенна");
            //иначе увеличиваем индекс начального элемента на 1
            else head++;
            //уменьшаем значение количества элементов на 1
            size--;
            //в переменную T записываем значение элемента массива, индекс которого определяется текущим значением индекса начального элемента
            double T = mas[head];
            //элементу массива присваиваем 0 
            mas[head] = 0;
            //вместо удаленного элемента записывается 0
            return T;
        }
        //очередь, которая заполняется нулями
        

        //метод, который возвращает значение первого элемента в очереди
        public double Peek()
        {
            return mas[head+1 ];
        }
        //метод, который возвращает последний элемент очереди
        public double End()
        {
            return mas[tail];
        }


        //метод, который возвращает количество элементов массива
        public int Count_elements()
        {
            return tail - head;
        }
        

        //очередь
        public void Queue()
        {
            //если количество элементов меньше длины очереди, то пустые позиции заполняются нулями
            Console.WriteLine("Очередь");
            //инициализация массива
            for (int i = 0; i < length; i++)
                //инициализация маасива
                Console.Write(" " + mas[i]);
            //отступ
            Console.WriteLine();
        }

        class Program
        {
            static void Main(string[] args)
            {
                //меню, реализованное при помощи цикла с постусловием
                int b;//переменная, являющаяся выражением для оператора switch
                
                do
                {
                    Console.WriteLine("Нажмите 1 и Enter, чтобы посмотреть условие задачи");

                    Console.WriteLine("Нажмите 2 и Enter, чтобы чтобы получить очередь \n(а также информацию о количестве элементов, первом и последнем элементе)введённую вами в методе Main");

                    Console.WriteLine("Нажмите 3 и Enter, чтобы выполнять ввод операций самостоятельно");

                    //ввод значения переменной b
                    b = Convert.ToInt32(Console.ReadLine());
                    /*оператор switch
                     * Значение выражения последовательно сравнивается
                    с константами выбора из заданного списка. Как только будет обнаружено совпадение,
                     выполняется последовательность операторов, связанных
                    с этим условием
                        */
                    switch (b)
                    {
                        //при нажатии клавиши 1 и Enter, выполняется последовательность операторов в метке case 1
                        case 1:
                            //выводится условие поставленной задачи
                            Console.WriteLine("Реализовать операции с очередью в массиве. Пусть очередь прирастает справа, а убывает слева.\nДлина массива должна соответствовать длине очереди.");
                            Console.WriteLine();//отступ
                            break;
                        //при нажатии клавиши 2 и Enter, выполняется последовательность операторов в метке case 2
                        case 2:
                            FIFO n = new FIFO(5);


                            //Вставка элементов в очередь
                            n.Enqueue(1);
                            n.Enqueue(-1);
                            n.Enqueue(1);
                            n.Enqueue(1);
                            n.Enqueue(1);


                            //удаление элемента из очерерди

                            n.Dequeue();
                            //очередь
                            n.Queue();
                            
                            //количество элементов в очереди
                            Console.WriteLine( "Количество элементов в очереди = " + n.Count_elements());
                            //проверка на количество элементов в массиве
                            if (n.Count_elements() == 0)
                            {
                                Console.WriteLine("Очередь пуста");
                                //если очередь пуста, то программа возвращает обратно в меню
                                break;
                            }
                            else
                            {
                                //первый элемент очереди
                                Console.WriteLine("Первый элементы очереди = " + n.Peek());

                                //последний элемент очереди

                                Console.WriteLine("Последний элемент очереди = " + n.End());

                                Console.WriteLine();//отступ
                            }
                            break;
                        //при нажатии клавиши 3 и Enter, выполняется последовательность операторов в метке case 3
                        case 3:

                            
                              Console.WriteLine("Введите длину очереди, а затем нажмите Enter");
                            /*
                             * обработка исключительной ситуации, если пользователь вводит длину очереди с отрицательным значением, 
                             * то на консоль выводится соответствующее сообщение об ошибке 
                                */
                            try
                            {

                                // переменная, которой присваивается значение длины очереди
                                int q = Convert.ToInt32(Console.ReadLine());


                                //создаём экземпляр r класса FIFO
                               //q - длина очереди
                                FIFO r = new FIFO(q);

                                Console.WriteLine("Введите количество элементов, которые хотите добавить и нажмите Enter");
                                //переменная, которой присваивается значение количества добавленных элементов очереди
                                int t = Convert.ToInt32(Console.ReadLine());
                                // массив размером t, в который будут записываться добавленные элементы
                                double[] add = new double[t];
                                /*условие, если количество добавленных элементов меньше
                                 * либо равно длине очереди, то в массив add добавляются элементы, которые вводятся 
                                 * пользователем вручную
                                */
                                if (t <= q)
                                {

                                    Console.WriteLine("Введите элементы по очереди\nЧтобы добавить элемент введите число и нажмите Enter");
                                    //цикл, при каждом проходе цикла в i-ый элемент массива присваивается значение добавленного элемента
                                    for (int i = 0; i < t; i++)
                                    {
                                        add[i] = Convert.ToInt32(Console.ReadLine());

                                    }

                                }
                                else
                                {
                                    //  если условие ложно то выводится сообщение об ошибке
                                    Console.WriteLine("Количество добавляемых элементов превышает длину очереди");
                                    //выход из цикла, выполнение программы возобновляется с оператора выбора switch
                                    break;
                                }



                                //цикл, при каждом проходе добавляется элемент в очередь, элементы берутся из массива add
                                for (int i = 0; i < t; i++)
                                {
                                    r.Enqueue(add[i]);
                                }
                                //обработка исключительной ситуации
                                try
                                {
                                    //вывод на консоль количества элементов
                                    Console.WriteLine("Количество элементов = " + r.Count_elements());
                                }
                                catch (Exception c)
                                {
                                    //вывод на консоль сообщения об ошибке
                                    Console.WriteLine("" + c.Message);
                                }
                                //вывод на консоль Очереди
                                r.Queue();
                                //обработка исключительной ситуации
                                try
                                {
                                    Console.WriteLine("Введите количество элементов, которые вы хотите удалить\nВместо удалённого элемента будет записан ноль\nВведите число, а затем нажмите Enter");
                                    //переменная, которой присваивается значение количества элементов, которые надо удалить из очереди
                                    int y = Convert.ToInt32(Console.ReadLine());
                                    //обработка исключительной ситуации
                                    try
                                    {

                                        //цикл, при каждом проходе цикла удаляется один элемент очереди
                                        for (int i = 0; i < y; i++)
                                        {
                                            r.Dequeue();
                                        }
                                    }
                                    catch (Exception m)
                                    {
                                        //вывод на консоль сообщения об ошибке
                                        Console.WriteLine(m.Message);
                                    }
                                    r.Queue();
                                    //очередь
                                    
                                    
                                    //обработка исключительной ситуации
                                    try
                                    {
                                        //вывод на консоль количества элементов в очерерди
                                        Console.WriteLine("Количество элементов = " + r.Count_elements());
                                    }
                                    catch (Exception c)
                                    {
                                        //вывод на консоль сообщения об ошибке
                                        Console.WriteLine(c.Message);
                                    }
                                    //обработка исключительной ситуации
                                    if (r.Count_elements() > 0)
                                    {
                                        try
                                        {
                                            //вывод на консоль первый элемент очереди
                                            Console.WriteLine("Первый элемент очереди = " + r.Peek());
                                        }
                                        catch (Exception v)
                                        {
                                            //вывод на консоль сообщения об ошибке
                                            Console.WriteLine(v.Message);
                                        }
                                        //обработка исключительной ситуации
                                        try
                                        {
                                            //вывод на консоль последнего элемента в очереди
                                            Console.WriteLine("Последний элемент очереди = " + r.End());
                                        }
                                        catch (Exception u)
                                        {
                                            //вывод на консоль сообщения об ошибке
                                            Console.WriteLine(u.Message);
                                        }
                                    }
                                    else
                                    {
                                        //если количество элементов равно нулю, то на консоль выведется сообщение
                                        Console.WriteLine("Очередь пуста");
                                        //выполнение программы возобновляется с оператора выбора switch
                                        break;
                                    }
                                }
                                catch (Exception j)
                                {
                                    //вывод на консоль сообщения об ошибке
                                    Console.WriteLine(j.Message);
                                }
                            }
                            catch(Exception v)
                            {
                                //вывод на консоль сообщения об ошибке 
                                Console.WriteLine(v.Message);
                            }
                        break;
                    }
                    //если выражение b не попадает в данный промежуток, то происходит выход из программы
                }while (b < 4 && b>0);
            }
        }
    }
}
